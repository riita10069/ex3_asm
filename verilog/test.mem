/// Verilog Memory Initialization File (.mem) generated by ./ex3_asm

/// 12-bit address
/// 16-bit data

@010 20ae	///                  0010 [20ae]: LDA 0ae   (               A)
@011 30b6	///                  0011 [30b6]: STA 0b6   (             Num)
@012 501f	///              JP: 0012 [501f]: BSA 01f   (      JugdePrime)
@013 20b5	///                  0013 [20b5]: LDA 0b5   (           PFlag)
@014 7004	///                  0014 [7004]: SZA                         
@015 401c	///                  0015 [401c]: BUN 01c   (       SavePrime)
@016 20b6	///                  0016 [20b6]: LDA 0b6   (             Num)
@017 7200	///                  0017 [7200]: CMA                         
@018 7020	///                  0018 [7020]: INC                         
@019 7200	///                  0019 [7200]: CMA                         
@01a 30b6	///                  001a [30b6]: STA 0b6   (             Num)
@01b 4012	///                  001b [4012]: BUN 012   (              JP)
@01c 20b6	///       SavePrime: 001c [20b6]: LDA 0b6   (             Num)
@01d 30af	///                  001d [30af]: STA 0af   (               B)
@01e 7001	///                  001e [7001]: HLT                         
@01f 001f	///      JugdePrime: 001f [001f]: (   31:   31)                 
///init
@020 7800	///                  0020 [7800]: CLA                         
@021 30b0	///                  0021 [30b0]: STA 0b0   (              KP)
///if num==2, True
@022 7400	///                  0022 [7400]: CLE                         
@023 20b3	///                  0023 [20b3]: LDA 0b3   (             Two)
@024 7200	///                  0024 [7200]: CMA                         
@025 7020	///                  0025 [7020]: INC                         
@026 10b6	///                  0026 [10b6]: ADD 0b6   (             Num)
@027 7004	///                  0027 [7004]: SZA                         
@028 402a	///                  0028 [402a]: BUN 02a   (          NotTwo)
@029 4058	///                  0029 [4058]: BUN 058   (            True)
///if num<2, False
@02a 7002	///          NotTwo: 002a [7002]: SZE                         
@02b 402d	///                  002b [402d]: BUN 02d   (         OverTwo)
@02c 405c	///                  002c [405c]: BUN 05c   (           False)
///if num>2 and num%2==0, False
@02d 20b6	///         OverTwo: 002d [20b6]: LDA 0b6   (             Num)
@02e 30b7	///                  002e [30b7]: STA 0b7   (        Dividend)
@02f 20b3	///                  002f [20b3]: LDA 0b3   (             Two)
@030 30b8	///                  0030 [30b8]: STA 0b8   (         Divisor)
@031 5074	///                  0031 [5074]: BSA 074   (             MOD)
@032 20ba	///                  0032 [20ba]: LDA 0ba   (       Remainder)
@033 7004	///                  0033 [7004]: SZA                         
@034 4036	///                  0034 [4036]: BUN 036   (          SetKPM)
@035 405c	///                  0035 [405c]: BUN 05c   (           False)
///if num>2 and num%2==1
///SetKPM
@036 7400	///          SetKPM: 0036 [7400]: CLE                         
@037 20b6	///                  0037 [20b6]: LDA 0b6   (             Num)
@038 7200	///                  0038 [7200]: CMA                         
@039 7020	///                  0039 [7020]: INC                         
@03a 10b1	///                  003a [10b1]: ADD 0b1   (            KPMM)
@03b 20b1	///                  003b [20b1]: LDA 0b1   (            KPMM)
@03c 7002	///                  003c [7002]: SZE                         
@03d 20b6	///                  003d [20b6]: LDA 0b6   (             Num)
@03e 30b2	///                  003e [30b2]: STA 0b2   (             KPM)
@03f 60b0	///         NotEven: 003f [60b0]: ISZ 0b0   (              KP)
@040 20b3	///                  0040 [20b3]: LDA 0b3   (             Two)
@041 30c6	///                  0041 [30c6]: STA 0c6   (    Multiplicand)
@042 20b0	///                  0042 [20b0]: LDA 0b0   (              KP)
@043 30c5	///                  0043 [30c5]: STA 0c5   (      Multiplier)
@044 505f	///                  0044 [505f]: BSA 05f   (  Multiplication)
@045 20c8	///                  0045 [20c8]: LDA 0c8   (         Product)
@046 7020	///                  0046 [7020]: INC                         
@047 30b4	///                  0047 [30b4]: STA 0b4   (            TMPP)
@048 20b2	///                  0048 [20b2]: LDA 0b2   (             KPM)
@049 7200	///                  0049 [7200]: CMA                         
@04a 7400	///                  004a [7400]: CLE                         
@04b 7020	///                  004b [7020]: INC                         
@04c 10b4	///                  004c [10b4]: ADD 0b4   (            TMPP)
@04d 7002	///                  004d [7002]: SZE                         
@04e 4058	///                  004e [4058]: BUN 058   (            True)
@04f 20b4	///                  004f [20b4]: LDA 0b4   (            TMPP)
@050 30b8	///                  0050 [30b8]: STA 0b8   (         Divisor)
@051 20b6	///                  0051 [20b6]: LDA 0b6   (             Num)
@052 30b7	///                  0052 [30b7]: STA 0b7   (        Dividend)
@053 5074	///                  0053 [5074]: BSA 074   (             MOD)
@054 20ba	///                  0054 [20ba]: LDA 0ba   (       Remainder)
@055 7004	///                  0055 [7004]: SZA                         
@056 403f	///                  0056 [403f]: BUN 03f   (         NotEven)
@057 405c	///                  0057 [405c]: BUN 05c   (           False)
@058 7800	///            True: 0058 [7800]: CLA                         
@059 7020	///                  0059 [7020]: INC                         
@05a 30b5	///                  005a [30b5]: STA 0b5   (           PFlag)
@05b c01f	///                  005b [c01f]: BUN 01f I (      JugdePrime)
@05c 7800	///           False: 005c [7800]: CLA                         
@05d 30b5	///                  005d [30b5]: STA 0b5   (           PFlag)
@05e c01f	///                  005e [c01f]: BUN 01f I (      JugdePrime)
///Multiplication
@05f 005f	///  Multiplication: 005f [005f]: (   95:  '_')                 
///init
@060 20c4	///                  0060 [20c4]: LDA 0c4   (         BitSize)
@061 30c7	///                  0061 [30c7]: STA 0c7   (              KM)
@062 7800	///                  0062 [7800]: CLA                         
@063 30c8	///                  0063 [30c8]: STA 0c8   (         Product)
///Start Calculation
@064 20c5	///         MulLoop: 0064 [20c5]: LDA 0c5   (      Multiplier)
@065 7080	///                  0065 [7080]: CIR                         
@066 30c5	///                  0066 [30c5]: STA 0c5   (      Multiplier)
@067 7002	///                  0067 [7002]: SZE                         
@068 4070	///                  0068 [4070]: BUN 070   ( ProductIncrease)
@069 20c6	///ProductIncreaseR: 0069 [20c6]: LDA 0c6   (    Multiplicand)
@06a 7400	///                  006a [7400]: CLE                         
@06b 7040	///                  006b [7040]: CIL                         
@06c 30c6	///                  006c [30c6]: STA 0c6   (    Multiplicand)
@06d 60c7	///                  006d [60c7]: ISZ 0c7   (              KM)
@06e 4064	///                  006e [4064]: BUN 064   (         MulLoop)
@06f c05f	///                  006f [c05f]: BUN 05f I (  Multiplication)
@070 20c8	/// ProductIncrease: 0070 [20c8]: LDA 0c8   (         Product)
@071 10c6	///                  0071 [10c6]: ADD 0c6   (    Multiplicand)
@072 30c8	///                  0072 [30c8]: STA 0c8   (         Product)
@073 4069	///                  0073 [4069]: BUN 069   (ProductIncreaseR)
///MOD
@074 0074	///             MOD: 0074 [0074]: (  116:  't')                 
///init
@075 7800	///                  0075 [7800]: CLA                         
@076 30b9	///                  0076 [30b9]: STA 0b9   (        Quotient)
@077 20b7	///                  0077 [20b7]: LDA 0b7   (        Dividend)
@078 30ba	///                  0078 [30ba]: STA 0ba   (       Remainder)
@079 7400	///                  0079 [7400]: CLE                         
@07a 7800	///                  007a [7800]: CLA                         
@07b 7020	///                  007b [7020]: INC                         
@07c 30bb	///                  007c [30bb]: STA 0bb   (              KD)
/// WHILE
@07d 20b8	///                  007d [20b8]: LDA 0b8   (         Divisor)
@07e 7004	///                  007e [7004]: SZA                         
@07f 4085	///                  007f [4085]: BUN 085   (             DDR)
@080 40a3	///                  0080 [40a3]: BUN 0a3   (         ToERROR)
///Double Divisor
@081 60bb	///              DD: 0081 [60bb]: ISZ 0bb   (              KD)
@082 7400	///                  0082 [7400]: CLE                         
@083 7040	///                  0083 [7040]: CIL                         
@084 4085	///                  0084 [4085]: BUN 085   (             DDR)
@085 7008	///             DDR: 0085 [7008]: SNA                         
@086 4081	///                  0086 [4081]: BUN 081   (              DD)
@087 30b8	///                  0087 [30b8]: STA 0b8   (         Divisor)
@088 20bb	///                  0088 [20bb]: LDA 0bb   (              KD)
@089 7200	///                  0089 [7200]: CMA                         
@08a 7020	///                  008a [7020]: INC                         
@08b 30bb	///                  008b [30bb]: STA 0bb   (              KD)
/// FOR
@08c 20b9	///             FOR: 008c [20b9]: LDA 0b9   (        Quotient)
@08d 7400	///                  008d [7400]: CLE                         
@08e 7040	///                  008e [7040]: CIL                         
@08f 30b9	///                  008f [30b9]: STA 0b9   (        Quotient)
@090 20b8	///                  0090 [20b8]: LDA 0b8   (         Divisor)
@091 7200	///                  0091 [7200]: CMA                         
@092 7020	///                  0092 [7020]: INC                         
@093 10ba	///                  0093 [10ba]: ADD 0ba   (       Remainder)
@094 7100	///                  0094 [7100]: CME                         
@095 7002	///                  0095 [7002]: SZE                         
@096 4099	///                  0096 [4099]: BUN 099   (           ENDIF)
@097 30ba	///                  0097 [30ba]: STA 0ba   (       Remainder)
@098 60b9	///                  0098 [60b9]: ISZ 0b9   (        Quotient)
@099 20b8	///           ENDIF: 0099 [20b8]: LDA 0b8   (         Divisor)
@09a 7400	///                  009a [7400]: CLE                         
@09b 7080	///                  009b [7080]: CIR                         
@09c 30b8	///                  009c [30b8]: STA 0b8   (         Divisor)
@09d 60bb	///                  009d [60bb]: ISZ 0bb   (              KD)
@09e 408c	///                  009e [408c]: BUN 08c   (             FOR)
@09f 20b8	///                  009f [20b8]: LDA 0b8   (         Divisor)
@0a0 7040	///                  00a0 [7040]: CIL                         
@0a1 30b8	///                  00a1 [30b8]: STA 0b8   (         Divisor)
@0a2 c074	///                  00a2 [c074]: BUN 074 I (             MOD)
@0a3 00a3	///         ToERROR: 00a3 [00a3]: (  163:  163)                 
@0a4 20c3	///                  00a4 [20c3]: LDA 0c3   (             EMG)
@0a5 10bc	///                  00a5 [10bc]: ADD 0bc   (         CNT_EMG)
@0a6 30a3	///                  00a6 [30a3]: STA 0a3   (         ToERROR)
@0a7 a0a3	///                  00a7 [a0a3]: LDA 0a3 I (         ToERROR)
@0a8 f100	///         WaitOut: 00a8 [f100]: SKO                         
@0a9 40a8	///                  00a9 [40a8]: BUN 0a8   (         WaitOut)
@0aa f400	///                  00aa [f400]: OUT                         
@0ab 60bc	///                  00ab [60bc]: ISZ 0bc   (         CNT_EMG)
@0ac 40a3	///                  00ac [40a3]: BUN 0a3   (         ToERROR)
@0ad 7001	///                  00ad [7001]: HLT                         
///DATA
@0ae ffee	///               A: 00ae [ffee]: (  -18:65518)                 
@0af 0000	///               B: 00af [0000]: (    0:    0)                 
///JugdePrime Parameters
@0b0 0000	///              KP: 00b0 [0000]: (    0:    0)                 
@0b1 0100	///            KPMM: 00b1 [0100]: (  256:  256)                 
@0b2 0000	///             KPM: 00b2 [0000]: (    0:    0)                 
@0b3 0002	///             Two: 00b3 [0002]: (    2:    2)                 
@0b4 0000	///            TMPP: 00b4 [0000]: (    0:    0)                 
@0b5 ffff	///           PFlag: 00b5 [ffff]: (   -1:65535)                 	///if Num==PrimeNumber, 1
@0b6 0000	///             Num: 00b6 [0000]: (    0:    0)                 
///MOD
@0b7 0000	///        Dividend: 00b7 [0000]: (    0:    0)                 
@0b8 0000	///         Divisor: 00b8 [0000]: (    0:    0)                 
@0b9 0000	///        Quotient: 00b9 [0000]: (    0:    0)                 
@0ba 0000	///       Remainder: 00ba [0000]: (    0:    0)                 
@0bb 0000	///              KD: 00bb [0000]: (    0:    0)                 
///ERROR DATA
@0bc fffa	///         CNT_EMG: 00bc [fffa]: (   -6:65530)                 
@0bd 0045	///                  00bd [0045]: (   69:  'E')                 
@0be 0052	///                  00be [0052]: (   82:  'R')                 
@0bf 0052	///                  00bf [0052]: (   82:  'R')                 
@0c0 004f	///                  00c0 [004f]: (   79:  'O')                 
@0c1 0052	///                  00c1 [0052]: (   82:  'R')                 
@0c2 0021	///                  00c2 [0021]: (   33:  '!')                 
@0c3 00c3	///             EMG: 00c3 [00c3]: (  195:  195)                 
@0c4 fff0	///         BitSize: 00c4 [fff0]: (  -16:65520)                 
///Multiplication Parametas
@0c5 0000	///      Multiplier: 00c5 [0000]: (    0:    0)                 
@0c6 0000	///    Multiplicand: 00c6 [0000]: (    0:    0)                 
@0c7 0000	///              KM: 00c7 [0000]: (    0:    0)                 
@0c8 0000	///         Product: 00c8 [0000]: (    0:    0)                 
